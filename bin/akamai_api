#!/usr/bin/env ruby
require 'thor'
require 'active_support/core_ext'
require 'akamai_api'

class EccuRequestView
  def initialize(eccu_request)
    @request = eccu_request
  end

  def template
    res = ["* Code    : #{@request.code}",
           "* Status  : #{@request.status[:code]}"]
    res.last << " - #{@request.status[:extended]}" if @request.status[:extended].present?
    res << "            #{@request.status[:update_date]}"
    res << "* Property: #{@request.property[:name]} (#{@request.property[:type]})"
    res << "            with exact match" if @request.property[:exact_match]
    res << "* Notes   : #{@request.notes}" if @request.notes.present?
    res << "* Email   : #{@request.email}" if @request.email
    res << "* Uploaded by #{@request.uploaded_by} on #{@request.upload_date}"
    if @request.file[:content].present?
      res << "* Content:"
      res << @request.file[:content]
    end
    res.join "\n"
  end

  def self.template(eccu_request)
    new(eccu_request).template
  end
end

class CpCodeView
  def initialize(cpcode)
    @cpcode = cpcode
  end

  def template
    "ID: #{@cpcode.code}\tDescription: #{@cpcode.description}"
  end

  def self.template cpcode
    new(cpcode).template
  end
end

class CcuResponseView
  def initialize(response)
    @response = response
  end

  def template
    res = ['#### Response Details ####',
           "* Request ID: #{@response.session_id}",
           "* Code: #{@response.code} (#{@response.status})",
           "* Message: #{@response.message}"]
    res << "* Estimate Time: #{@response.estimated_time} secs.;" if @response.estimated_time > 0
    res << "* Error caused by: #{res.uri};" if res.uri
    res.join "\n"
  end
end

class AkamaiCommand < Thor
  def initialize *args
    @config_file = File.expand_path File.join '~', '.akamai_api.yml'
    super
  end

  desc 'cp_codes', 'Return the list of all cp_codes'
  method_option :username, :type => :string, :aliases => '-u',
                :desc => 'Username used to authenticate on Akamai Control Panel'
  method_option :password, :type => :string, :aliases => '-p',
                :desc => 'Password used to authenticate on Akamai Control Panel'
  def cp_codes
    set_config
    AkamaiApi::CpCode.all.each do |cp_code|
      puts CpCodeView.template(cp_code)
    end
  end

  desc 'purge', 'Purge a list of items (ex. akamai purge_by_cp_code --cpcodes="1234 5678"). You need to use --cpcodes OR --urls (you cannot use both)'
  method_option :username, :type => :string, :aliases => '-u',
                :desc => 'Username used to authenticate on Akamai Control Panel'
  method_option :password, :type => :string, :aliases => '-p',
                :desc => 'Password used to authenticate on Akamai Control Panel'
  method_option :action,   :type => :string, :aliases => '-a',
                :default => 'invalidate', :required => true,
                :banner => 'remove|invalidate',
                :desc => 'Action to use for purging. Use "remove" to completely remove a resource from the cache and "invalidate" to simply mark the resource as expired.'
  method_option :domain,   :type => :string, :aliases => '-d',
                :banner => 'production|staging',
                :desc => 'Optional argument used to specify the environment. Usually you will not need this option'
  method_option :emails,   :type => :array,  :aliases => '-e',
                :banner => "foo@foo.com bar@bar.com",
                :desc => 'Email(s) used to send notification when the purge has been completed'
  method_option :urls,     :type => :array,
                :banner => 'http://example.com/foo http://example.com/bar',
                :desc => 'Use this option to purge a list of url. You cannot use both --urls and --cpcodes'
  method_option :cpcodes,  :type => :array,
                :banner => '1234 5678',
                :desc => 'Use this option to purge a list of cp codes. You cannot use both --urls and --cpcodes'
  def purge
    set_config
    if options[:urls].nil? && options[:cpcodes].nil?
      raise "You should choose if you want to remove a url (use --urls option) or cpcodes (use --cpcodes option)"
    end
    if options[:urls].present? && options[:cpcodes].present?
      raise "You cannot remove both urls and cpcodes. Choose only one!"
    end
    if options[:urls]
      type = :arl
      items = options[:urls]
    else
      type = :cpcode
      items = options[:cpcodes]
    end
    args = {}
    args[:domain] = options[:domain] if options[:domain]
    args[:email]  = options[:emails] if options[:emails]
    res = AkamaiApi::Ccu.purge options[:action], type, items, args
    puts '------------'
    puts CcuResponseView.template(res)
    puts '------------'
  end

  desc 'eccu_requests', 'Show the the last requests made to ECCU'
  method_option :username, :type => :string, :aliases => '-u',
                :desc => 'Username used to authenticate on Akamai Control Panel'
  method_option :password, :type => :string, :aliases => '-p',
                :desc => 'Password used to authenticate on Akamai Control Panel'
  method_option :verbose, :type => :boolean, :aliases => '-v',
                :desc => 'Print file content too'
  method_option :last, :type => :boolean, :aliases => '-l'
  def eccu_requests
    set_config
    if options[:last]
      requests = Array.wrap AkamaiApi::EccuRequest.last :verbose => options[:verbose]
    else
      requests = AkamaiApi::EccuRequest.all :verbose => options[:verbose]
    end
    requests.each do |request|
      puts '------------'
      puts EccuRequestView.template(request)
    end
    puts '------------'
  end

  desc 'publish_eccu', 'Publish an ECCU request'
  method_option :username, :type => :string, :aliases => '-u',
                :desc => 'Username used to authenticate on Akamai Control Panel'
  method_option :password, :type => :string, :aliases => '-p',
                :desc => 'Password used to authenticate on Akamai Control Panel'
  method_option :property, :type => :string, :aliases => '-dp', :required => true,
                :banner => 'example.com',
                :desc => 'List of digital properties to which apply the ECCU request'
  method_option :source, :type => :string, :aliases => '-s', :required => true,
                :banner => 'path/to/file.xml',
                :desc => 'Source file to publish on ECCU'
  method_option :property_type, :type => :string, :aliases => '-pt',
                :default => 'hostheader', :banner => 'type',
                :desc => 'Property Type to use for the specified properties'
  method_option :no_exact_match, :type => :boolean,
                :desc => 'Do not do an exact match on property names'
  method_option :emails,   :type => :array,  :aliases => '-e',
                :banner => "foo@foo.com bar@bar.com",
                :desc => 'Email(s) used to send notification when the request has been completed'
  method_option :notes, :type => :string, :aliases => '-n',
                :default => 'ECCU Request using AkamaiApi gem',
                :desc => 'Notes to apply on the ECCU Request'
  def publish_eccu
    set_config
    args = {
      :notes => options[:notes],
      :property_exact_match => !options[:no_exact_match],
      :property_type => options[:property_type]
    }
    args[:emails] = options[:emails] if options[:emails]
    id = AkamaiApi::EccuRequest.publish_file options[:property], options[:source], args
    puts 'Request correctly published. Details:'
    puts '------------'
    puts EccuRequestView.template AkamaiApi::EccuRequest.find id, :verbose => true
    puts '------------'
  end

  no_tasks do
    def set_config
      config = YAML::load_file(@config_file).symbolize_keys
      if options[:username] && options[:password]
        config.merge! :auth => [options[:username], options[:password]]
      end
      if config[:auth].nil? || config[:auth].compact.blank?
        raise "#{@config_file} does not exist or doesn't contain auth info and you didn't specify username and password options"
      end
      AkamaiApi.config.merge! config
    end
  end
end

AkamaiCommand.start