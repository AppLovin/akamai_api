#!/usr/bin/env ruby
require 'thor'
require 'active_support/core_ext'
require 'akamai_api'

class AkamaiCommand < Thor
  def initialize *args
    @config_file = File.expand_path File.join '~', '.akamai_api.yml'
    super
  end

  desc 'cp_codes', 'Return the list of all cp_codes'
  method_option :username, :type => :string, :aliases => '-u',
                :desc => 'Username used to authenticate on Akamai Control Panel'
  method_option :password, :type => :string, :aliases => '-p',
                :desc => 'Password used to authenticate on Akamai Control Panel'
  def cp_codes
    set_config
    AkamaiApi::CpCode.all.each do |cp_code|
      puts "ID: #{cp_code.code}; Description: #{cp_code.description}"
    end
  end

  desc 'purge', 'Purge a list of items (ex. akamai purge_by_cp_code --cpcodes="1234 5678"). You need to use --cpcodes OR --urls (you cannot use both)'
  method_option :username, :type => :string, :aliases => '-u',
                :desc => 'Username used to authenticate on Akamai Control Panel'
  method_option :password, :type => :string, :aliases => '-p',
                :desc => 'Password used to authenticate on Akamai Control Panel'
  method_option :action,   :type => :string, :aliases => '-a',
                :default => 'invalidate', :required => true,
                :banner => 'remove|invalidate',
                :desc => 'Action to use for purging. Use "remove" to completely remove a resource from the cache and "invalidate" to simply mark the resource as expired.'
  method_option :domain,   :type => :string, :aliases => '-d',
                :banner => 'production|staging',
                :desc => 'Optional argument used to specify the environment. Usually you will not need this option'
  method_option :emails,   :type => :array,  :aliases => '-e',
                :banner => "foo@foo.com bar@bar.com",
                :desc => 'Email(s) used to send notification when the purge has been completed'
  method_option :urls,     :type => :array,
                :banner => 'http://example.com/foo http://example.com/bar',
                :desc => 'Use this option to purge a list of url. You cannot use both --urls and --cpcodes'
  method_option :cpcodes,  :type => :array,
                :banner => '1234 5678',
                :desc => 'Use this option to purge a list of cp codes. You cannot use both --urls and --cpcodes'
  def purge
    set_config
    if options[:urls].nil? && options[:cpcodes].nil?
      raise "You should choose if you want to remove a url (use --urls option) or cpcodes (use --cpcodes option)"
    end
    if options[:urls].present? && options[:cpcodes].present?
      raise "You cannot remove both urls and cpcodes. Choose only one!"
    end
    if options[:urls]
      type = :arl
      items = options[:urls]
    else
      type = :cpcode
      items = options[:cpcodes]
    end
    args = {}
    args[:domain] = options[:domain] if options[:domain]
    args[:email]  = options[:emails] if options[:emails]
    res = AkamaiApi::Ccu.purge options[:action], type, items, args
    puts <<-CONSOLE
#### Response Details ####
* Request ID: #{res.session_id};
* Code: #{res.code} (#{res.status});
* Message: #{res.message};
    CONSOLE
    puts "* Estimate Time: #{res.estimated_time} secs.;" if res.estimated_time > 0
    puts "* Error caused by: #{items[res.uri_index]};" if res.uri_index >= 0
  end

  desc 'eccu_requests', 'Show the the last requests made to ECCU'
  method_option :verbose, :type => :boolean, :aliases => '-v',
                :desc => 'Print file content too'
  method_option :last, :type => :boolean, :aliases => '-l'
  def eccu_requests
    set_config
    if options[:last]
      requests = Array.wrap AkamaiApi::EccuRequest.last :verbose => options[:verbose]
    else
      requests = AkamaiApi::EccuRequest.all :verbose => options[:verbose]
    end
    requests.each do |request|
      puts <<-CONSOLE
------------
* Code    : #{request.code}
* Status  : #{request.status[:code]} - #{request.status[:extended]}
          #{request.status[:update_date]}
* Notes   : #{request.notes}
* Property: #{request.property[:type]} (#{request.property[:name]}) #{'with exact match' if request.property[:exact_match]}
* Notified to: #{request.email}
* Uploaded by #{request.uploaded_by} on #{request.upload_date}
      CONSOLE
      if request.file[:content].present?
        puts "Content:"
        puts request.file[:content]
      end
    end
    puts "------------"
  end

  no_tasks do
    def set_config
      config = YAML::load_file(@config_file).symbolize_keys
      if options[:username] && options[:password]
        config.merge! :auth => [options[:username], options[:password]]
      end
      if config[:auth].nil? || config[:auth].compact.blank?
        raise "#{@config_file} does not exist or doesn't contain auth info and you didn't specify username and password options"
      end
      AkamaiApi.config.merge! config
    end
  end
end

AkamaiCommand.start